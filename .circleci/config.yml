version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # change directory backend
            cd frontend
            # install dependencies in packege.json
            npm install
            # build
            npm run build
      # save results to cache
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
                
  test-backend:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
            
  scan-frontend:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here

  scan-backend:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              #--tags project=your-tag \
              # --stack-name "your back-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              #--tags project=your-tag \
              # --stack-name "your front-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible latest version
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from github
      - checkout
      # Add ssh key to known hosts by using key fingerprint when uploading the key to circleci
      - add_ssh_keys:
          fingerprints:
            - '11:d0:4c:1c:25:ef:3c:3d:d6:bb:55:c3:62:dd:27:2d'
      - run:
          name: Install dependencies
          command: |
            # install dependencies by using apk package manager to install tar, gzip, ansible and aws cli
            apk add --update --no-cache ansible gzip aws-cli tar  
      # Attach workspace to use inventory file from previous job
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            # Add all enviroment variables to .env file from environment variables in circleci we implemented in the beginning of the file
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            # Cat .env file to check if it's correct
            cat backend/.env
            # Change directory to ansible folder
            cd .circleci/ansible
            # Run ansible playbook to configure server with the correct environment variables and install dependencies
            ansible-playbook -i inventory.txt configure-server.yml
      # Persist workspace to use in next job      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend            
      # Destroy infrastructure if job fails to prevent unnecessary costs
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # install dependencies by using apt package manager to install tar, gzip, curl and aws cli
            sudo apt install -y tar gzip curl
            # install aws cli v2
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            # unzip aws cli v2
            unzip -qq awscliv2.zip
            # install aws cli v2
            sudo ./aws/install
      - run:
          name: Update cloudfront distribution
          command: |
            # Export old workflow id to environment variable to use in cloudfront.yml file
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            # Deploy cloudfront.yml file
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople
            # Export cloudfront url to environment variable to use in frontend .env file
            echo OldWorkflowID: ${OldWorkflowID}
            echo Current Workflow id: ${CIRCLE_WORKFLOW_ID:0:7}            
      # Here's where you will add some code to rollback on failure
      # Destroy infrastructure if job fails to prevent unnecessary costs
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Revert migrations if job fails to prevent unnecessary costs    
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]